Can you tell how linear data structures differ from non-linear data structures?

If the elements of a data structure result in a sequence or a linear list then it is called a linear data structure. Whereas, traversal of 
nodes happens in a non-linear fashion in non-linear data structures.
Lists, stacks, and queues are examples of linear data structures whereas graphs and trees are the examples of non-linear data structures.

-------------------------------

What is a linked list?

A linked list is a data structure that has sequence of nodes where every node is connected to the next node by means of a reference pointer. 
The elements are not stored in adjacent memory locations. They are linked using pointers to form a chain. This forms a chain-like link for data storage.

Each node element has two parts:
a data field
a reference (or pointer) to the next node.
The first node in a linked list is called the head and the last node in the list has the pointer to NULL. Null in the reference field indicates that the node is 
the last node. When the list is empty, the head is a null reference.

------------------------------------

Are linked lists of linear or non-linear type?

Linked lists can be considered both linear and non-linear data structures. This depends upon the application that they are used for.

When linked list is used for access strategies, it is considered as a linear data-structure. When they are used for data storage, it can be considered as 
a non-linear data structure.

--------------------------------------

How are linked lists more efficient than arrays?

Insertion and Deletion
Insertion and deletion process is expensive in an array as the room has to be created for the new elements and existing elements must be shifted.
But in a linked list, the same operation is an easier process, as we only update the address present in the next pointer of a node.

Dynamic Data Structure
Linked list is a dynamic data structure that means there is no need to give an initial size at the time of creation as it can grow and shrink at runtime 
by allocating and deallocating memory.
Whereas, the size of an array is limited as the number of items is statically stored in the main memory.

No wastage of memory
As the size of a linked list can grow or shrink based on the needs of the program, there is no memory wasted because it is allocated in runtime.
In arrays, if we declare an array of size 10 and store only 3 elements in it, then the space for 3 elements is wasted. Hence, chances of memory wastage is more in arrays.

------------------------

What is a doubly-linked list (DLL)? What are its applications.

This is a complex type of a linked list wherein a node has two references:
One that connects to the next node in the sequence
Another that connects to the previous node.
This structure allows traversal of the data elements in both directions (left to right and vice versa).

Applications of DLL are:
A music playlist with next song and previous song navigation options.
The browser cache with BACK-FORWARD visited pages
The undo and redo functionality on platforms such as word, paint etc, where you can reverse the node to get to the previous page.

---------------------------------

 Explain what is Binary Search
 
 When the list is sorted we can use the binary search (also known as half-interval search, logarithmic search, or binary chop) technique to find items on the list. 
 
 int binarySearch(int Arr[], int n, int target) {

	//set stating and ending index
	int start = 0, ending = n-1;

	while(start <= ending) {
		// take mid of the list
		int mid = (start + end) / 2;

		// we found a match
		if(Arr[mid] == target) {
			return mid; 
		}
		// go on right side
		else if(Arr[mid] < target) {
			start = mid + 1;
		}
		// go on left side
		else {
			end = mid - 1;
		}
	}
	// element is not present in list
	return -1;
}

--------------------------------

Find the middle of a given linked list

void printMiddle(Node head)
{
    int count = 0;
    Node mid = head;
 
    while (head != null)
    {
 
        // Update mid, when 'count'
        // is odd number
        if ((count % 2) == 1)
            mid = mid.next;
 
        ++count;
        head = head.next;
    }
 
    // If empty list is provided
    if (mid != null)
        System.out.println("The middle element is [" +
                            mid.data + "]\n");
}

---------------------------------------

Given a Linked List and a number n, write a function that returns the value at the n’th node from the end of the Linked List.


 void printNthFromLast(int n)
    {
        int len = 0;
        Node temp = head;
  
        // 1) count the number of nodes in Linked List
        while (temp != null) {
            temp = temp.next;
            len++;
        }
  
        // check if value of n is not more than length of
        // the linked list
        if (len < n)
            return;
  
        temp = head;
  
        // 2) get the (len-n+1)th node from the beginning
        for (int i = 1; i < len - n + 1; i++)
            temp = temp.next;
  
        System.out.println(temp.data);
    }
    
    -----------------------------
    
    Reverse a linked list
    
     Node reverse(Node node)
    {
        Node prev = null;
        Node current = node;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }
    
    ----------------------------------
    
    
    Reverse an Array
    
    public static void Reverse(int arr[], int n){
      int start = 0;
      int end = n-1;
      int temp =0;
      while(start < end){
          temp = arr[start];
          arr[start] = arr[end];
          arr[end] = temp;
          start++;
          end--;
      }

      for(int i:arr){
          System.out.print(i+" ");
      }
    }
    
    
    -------------------------------------
    
  Permutations of a string
  
  
   public static void Permutations(String ques, String ans = "")
    {
        if(ques.length()==0)
        System.out.print(ans+" ");

        for(int i=0;i<ques.length();i++)
        {
            char ch = ques.charAt(i);
            String lpart = ques.substring(0,i);
            String rpart = ques.substring(i+1);
            String roq = lpart + rpart;
            Permutations(roq, ans+ch);
        }
    }
    
    -------------------------------
    
    Two Sum -
    
    class PairSum {
    static void printpairs(int arr[], int sum)
    {
        HashSet<Integer> s = new HashSet<Integer>();
        for (int i = 0; i < arr.length; ++i)
        {
            int temp = sum - arr[i];
 
            // checking for condition
            if (s.contains(temp)) {
                System.out.println(
                    "Pair with given sum "
                    + sum + " is (" + arr[i]
                    + ", " + temp + ")");
            }
            s.add(arr[i]);
        }
    }
    
    -------------------------------
    
    Largest Sum Contiguous Subarray
    
    static int maxSubArraySum(int a[],int size)
{
     
    int max_so_far = a[0], max_ending_here = 0;
 
    for (int i = 0; i < size; i++)
    {
        max_ending_here = max_ending_here + a[i];
        if (max_ending_here < 0)
            max_ending_here = 0;
         
        /* Do not compare for all
           elements. Compare only
           when max_ending_here > 0 */
        else if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
         
    }
    return max_so_far;
}
    
    -------------------------------
    
    Two non repeating elements
    
     public static void Xor(int arr[], int n){
        
        int xor =0, x=0, y=0, rsbm;

        for(int i=0;i<n;i++)
        xor ^= arr[i];

        rsbm =xor & ~(xor-1);

        for(int i=0;i<n;i++){

            if((arr[i]&rsbm)==0)
            x ^= arr[i];

            else
            y ^= arr[i];
        }

        System.out.println(x+" "+y);
    }
    
    -------------------------
    
    TIME COMPLEXITY ---
    
What is the TC and SC of the following :-

1.
 int a = 0, b = 0;
for (i = 0; i < N; i++) {
    a = a + rand();
}
for (j = 0; j < M; j++) {
    b = b + rand();
}

O(N + M) time, O(1) space

----------------------------
2. 
int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
    for (j = 2; j <= n; j = j * 2) {
        k = k + n / 2;
    }
}

TC - O(nLogn)

--------------------------

3. 
// Fibonacci of nth element
function fibonacci (n) {
    if (n <= 1) {
        return 1;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

Time Complexity: O(2^n)

-----------------------------

4. 
                      Time Complexities
Algorithm	          Best	       Average	      Worst

Selection Sort	     Ω(n^2)	      θ(n^2)	      O(n^2)	 
Bubble Sort	          Ω(n)	      θ(n^2)	      O(n^2)	 
Insertion Sort	      Ω(n)	      θ(n^2)	      O(n^2)	 
Heap Sort	        Ω(n log(n))	  θ(n log(n))	  O(n log(n))	 
Quick Sort	      Ω(n log(n))	  θ(n log(n))	    O(n^2)	 
Merge Sort	      Ω(n log(n))	  θ(n log(n))	  O(n log(n))	 
Bucket Sort	      Ω(n+k)	        θ(n+k)	      O(n^2)	 
Radix Sort	      Ω(nk)	          θ(nk)	         O(nk)

Linear Search   O(1)              O(n)          O(n)
Binary Search   O(1)              O(logn)       O(logn)

 
-----------------------------------



